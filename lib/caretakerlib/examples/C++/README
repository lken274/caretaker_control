This sample application is a native C++ console application illustrating use of
libcaretaker_dynamic.dll to monitor the Caretaker device.

1. Environment Setup
--------------------
Download and install the following programs on the PC to build the application.

	* Visual Studio 2017 or later
	* .NET Framework 4.0 or later
	* Common Language Runtime (CLR) 4.0

2. Bluetooth Setup
------------------------
If connecting via BLE, setup Bluetooth on the PC that will run the sample application.
Plug TI CC2540 dongle or similar dongle into a USB port on the PC then install the necessary drivers.
After successful setup, the dongle will appear as a virtual COM port that the application will use
to communicate with the Caretaker device. Note the library automatically detects the dongle, so after
setup you only need to plug it into the PC then run the sample application.

3. USB Setup (Caretaker 5 only)
--------------------------------
If connecting via USB, turn on the Caretaker 5, then navigate to USB settings. Enable "USB" and then
"USB data transfer mode." Plug the Caretaker 5 into the PC using standard USB C cable.

4. WiFi Setup (Caretaker 5 only)
--------------------------------
If connecting via WiFi, ensure the PC and the Caretaker 5 are connected to the same WiFi network.

5. Building the sample application
----------------------------------
Start Visual Studio 2019 then open CaretakerNativeSampleApp.sln. Set the active solution to x64
if using the 64-bit library or x86 if using the 32-bit library then click Build->Rebuild Solution
in the tool bar to build the sample App.

6. Running the sample application with BLE connection
-----------------------------------------------------
Modify CaretakerNativeSampleApp.cpp to define CONNECTION_TYPE LIBCT_DEVICE_CLASS_BLE and rebuild the
application.

Next, plug the BLE dongle into the PC and then start the sample application from the Visual Studio
IDE using the Local Windows Debugger play button, or by double-clicking the CaretakerNativeSampleApp.exe
located in the x64/Debug or x32/Debug directory.

Next, attach the finger cuff sensor then press the Caretaker button for the device to begin advertising
for a connection. The device displays an orange BLE icon when it is advertising for a connection, the
icon turns blue after the connection is established.

If the BLE dongle was detected and the Caretaker is advertising for connection, the sample App will
connect to the device and begins a calibration. View the console for application logs and vital
sign measurements.

7. Running the sample application with USB connection
-----------------------------------------------------
Modify CaretakerNativeSampleApp.cpp to define CONNECTION_TYPE LIBCT_DEVICE_CLASS_USB and rebuild the
application.

Next, plug the Caretaker 5 into the PC using standard USB C cable and then attach finger cuff.

Next, start the sample application from the Visual Studio IDE using the Local Windows Debugger play
button, or by double-clicking the CaretakerNativeSampleApp.exe located in the x64/Debug or x32/Debug
directory.

The sample App will connect to the device and begins a calibration. View the console for application
logs and vital sign measurements.

8. Running the sample application with WiFi connection
------------------------------------------------------
Modify CaretakerNativeSampleApp.cpp to define CONNECTION_TYPE LIBCT_DEVICE_CLASS_TCP and rebuild the
application.

Next, enable WiFi on both the PC and Carataker, then attach finger cuff.

Next, start the sample application from the Visual Studio IDE using the Local Windows Debugger play
button, or by double-clicking the CaretakerNativeSampleApp.exe located in the x64/Debug or x32/Debug
directory.

The sample App will connect to the device and begins a calibration. View the console for application
logs and vital sign measurements.
